package main

type Stack [10] int

func main() {
	// return 之后的语句不会执行

	// 如果一个函数需要返回值，那么这个函数每一个代码分支都要有return 语句

	// 函数定义时，它的形参一般是有名字的，不过我们可以定义没有形参名的函数

	// 只有相应的形参类型 就像这样: func f(int, int, float64)

	// 没有参数的函数成为 niladic 函数

	// 按值传递 (call by value)
	// 传递参数的副本，不影响原来的变量

	// 按引用传递 (call by reference)
	// 变量签名加&，内存消耗更少

	// 切片(slice) 字典(map) 接口(interface) 通道(channel) 
	// 都是默认使用引用传递

	// 如果一个函数需要返回四到五个值
	// 我们可以传递一个切片给函数(如果返回值具有相同的类型)
	// 或者传递一个结构体(如果返回值具有不同的类型)
	// 传递一个指针允许直接修改变量的值，消耗也更少

	// 尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂。

	// 空白符用来匹配一些不需要的值，然后丢弃掉，

	// 传递指针给函数不但可以节省内存（因为没有复制变量的值），
	// 而且赋予了函数直接修改外部变量的能力，
	// 所以被修改的变量不再需要使用 return 返回
}


func (st *Stack) Pop() int {
	v := 0
	for ix:=len(st) - 1; ix >= 0; ix-- {
		if v = st[ix]; v != 0 {
			st[ix] = 0
			return v
		}
	}

	return v
}